//
//  MoviesListViewController.swift
//  MoviesCleanSwift
//
//  Created by Anton Gutkin on 18.01.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MoviesListDisplayLogic: AnyObject {
    func displayLoadingindicator()
    func hideLoadingindicator()
    func display(error: NetworkResponseError)
    func displayMovies(viewModel: MoviesList.UI.ViewModel)
}

class MoviesListViewController: BaseViewController {
    private struct Constants {
        static let searchBarPlaceholderText = "Search Films"
        static let backgroundColor = UIColor.white
    }
    
    var interactor: MoviesListBusinessLogic?
    var router: (NSObjectProtocol & MoviesListRoutingLogic & MoviesListDataPassing)?
    
    @IBOutlet private var tableView: UITableView!
    
    private let searchController = UISearchController(searchResultsController: nil)

    private var cellConfigurations = [MoviesList.UI.CellConfiguration]()

    // MARK: - Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: - View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setup()
        setupTableView()
        setupSearchController()
        requestMovies(with: "terminator")
        
        view.backgroundColor = Constants.backgroundColor
    }
    // MARK: - request data from MoviesListInteractor

    func requestMovies(with title: String) {
        let request = MoviesList.Movies.Request(title: title)
        interactor?.getMovies(request: request)
    }
    
    // MARK: - Setup Clean Code Design Pattern

    private func setup() {
        let viewController = self
        let interactor = MoviesListInteractor()
        let presenter = MoviesListPresenter()
        let router = MoviesListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    private func setupTableView() {
        tableView.delegate = self
        tableView.dataSource = self
        
        tableView.register(UINib(nibName: String(describing: MovieTableViewCell.self), bundle: nil), forCellReuseIdentifier: String(describing: MovieTableViewCell.self))
        tableView.register(UINib(nibName: String(describing: LoadingTableViewCell.self), bundle: nil), forCellReuseIdentifier: String(describing: LoadingTableViewCell.self))
    }
    
    private func setupSearchController() {
        searchController.searchResultsUpdater = self
        searchController.obscuresBackgroundDuringPresentation = false
        searchController.searchBar.placeholder = Constants.searchBarPlaceholderText
        searchController.searchBar.tintColor = .black
        
        navigationItem.searchController = searchController
        definesPresentationContext = true
    }
}

extension MoviesListViewController: MoviesListDisplayLogic {
    func displayMovies(viewModel: MoviesList.UI.ViewModel) {
        cellConfigurations = viewModel.cellConfigurations
        tableView.reloadData()
    }
    
    func displayLoadingindicator() {
        showLoadingController(aboveNavBar: true)
    }
    
    func hideLoadingindicator() {
        hideLoadingController()
    }
    
    func display(error: NetworkResponseError) {
        show(error: error)
    }
}

extension MoviesListViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return cellConfigurations.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard indexPath.row < cellConfigurations.count else {
            return UITableViewCell()
        }
        
        var cell = UITableViewCell()
        
        let cellType = cellConfigurations[indexPath.row].cellType
        
        switch cellType {
        case .movie:
            guard let movieCell = tableView.dequeueReusableCell(withIdentifier: String(describing: MovieTableViewCell.self), for: indexPath) as? ConfigurableTableViewCell else {
                return cell
            }
            
            movieCell.congigureCell(with: cellConfigurations[indexPath.row].configuration)
            
            cell = movieCell
        case .loading:
            guard let loadingCell = tableView.dequeueReusableCell(withIdentifier: String(describing: LoadingTableViewCell.self), for: indexPath) as? ConfigurableTableViewCell else {
                return cell
            }
            
            loadingCell.congigureCell(with: cellConfigurations[indexPath.row].configuration)
            
            cell = loadingCell
        }
        
        return cell
    }
    
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        guard cell is LoadingTableViewCell else {
            return
        }
        
        requestMovies(with: "terminator")
    }
}

extension MoviesListViewController: UISearchResultsUpdating {
  func updateSearchResults(for searchController: UISearchController) {
    // TODO
  }
}
