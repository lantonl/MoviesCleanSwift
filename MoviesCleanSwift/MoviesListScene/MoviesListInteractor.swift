//
//  MoviesListInteractor.swift
//  MoviesCleanSwift
//
//  Created by Anton Gutkin on 18.01.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MoviesListBusinessLogic {
    func getMovies(request: MoviesList.Movies.Request)
}

protocol MoviesListDataStore {
    var moviesAPIResponse: MovieAPIResponse? { get set }
}

class MoviesListInteractor: MoviesListBusinessLogic, MoviesListDataStore {
    private struct Constants {
        static let firstPageIndex = 1
    }
    
    var presenter: MoviesListPresentationLogic?
    var worker: MovesSceneNetworkingWorkerLogic?
    var moviesAPIResponse: MovieAPIResponse?
    
    func getMovies(request: MoviesList.Movies.Request) {
        worker = MoviesListWorker()
        let pageToRequest = moviesAPIResponse == nil ? Constants.firstPageIndex : moviesAPIResponse?.nextPage
        
        guard let pageToLoad = pageToRequest else {
            return
        }
        
        if pageToRequest == Constants.firstPageIndex {
            presenter?.showLoadingIndicator()
        }
        
        worker?.getMovies(title: request.title, page: pageToLoad) { [weak self] result in
            if pageToRequest == Constants.firstPageIndex {
                self?.presenter?.hideLoadingIndicator()
            }
            
            switch result {
            case .success(let response):
                self?.moviesAPIResponse = response
                guard let moviesAPIResponse = response else {
                    return
                }
                
                let response = MoviesList.Movies.Response(movieAPIResponse: moviesAPIResponse)
                if pageToRequest == Constants.firstPageIndex {
                    self?.presenter?.present(moviesResponse: response)
                } else {
                    self?.presenter?.presentNextPage(moviesResponse: response)
                }
            case .failure(let error):
                self?.presenter?.show(error: error)
            }
        }
    }
}
